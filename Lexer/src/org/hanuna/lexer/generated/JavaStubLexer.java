/* The following code was generated by JFlex 1.6.1 */

package org.hanuna.lexer.generated;


import org.hanuna.lexer.Token;
import org.hanuna.lexer.TokenType;
import org.hanuna.lexer.flex.support.*;
import static org.hanuna.lexer.flex.JavaStubTokenTypes.*;
import org.jetbrains.annotations.NotNull;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>Lexer/src/org/hanuna/lexer/flex/JavaStub.flex</tt>
 */
public class JavaStubLexer extends JFlexAdapter {

  /** This character denotes the end of file */
  private static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  private static final int YYINITIAL = 0;
  private static final int STRING = 2;
  private static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\106\1\107\1\1\16\7\4\0\1\3\1\73"+
    "\1\24\1\0\1\6\1\73\1\75\1\25\1\57\1\60\1\5\1\77"+
    "\1\66\1\23\1\21\1\4\1\10\1\16\1\100\1\15\1\101\1\17"+
    "\1\104\1\102\1\103\1\11\1\71\1\65\1\70\1\72\1\67\1\74"+
    "\1\0\3\14\1\105\1\22\1\20\5\6\1\12\13\6\1\13\2\6"+
    "\1\63\1\26\1\64\1\73\1\6\1\0\1\30\1\52\1\31\1\47"+
    "\1\34\1\43\1\33\1\50\1\35\1\6\1\32\1\44\1\36\1\42"+
    "\1\37\1\27\1\6\1\40\1\45\1\41\1\53\1\54\1\51\1\46"+
    "\1\55\1\56\1\61\1\76\1\62\1\74\6\7\1\110\32\7\2\0"+"\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0" +"\27\6\1\0\37\6\1\0\u013f\6\31\0\162\6\4\0\14\6\16\0"+
    "\5\6\11\0\1\6\21\0\130\7\5\0\23\7\12\0\1\6\13\0"+
    "\1\6\1\0\3\6\1\0\1\6\1\0\24\6\1\0\54\6\1\0"+
    "\46\6\1\0\5\6\4\0\202\6\1\0\4\7\3\0\105\6\1\0"+
    "\46\6\2\0\2\6\6\0\20\6\41\0\46\6\2\0\1\6\7\0"+
    "\47\6\11\0\21\7\1\0\27\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\1\0\1\7\13\0\33\6\5\0\3\6\15\0\4\7\14\0"+
    "\6\7\13\0\32\6\5\0\13\6\16\7\7\0\12\7\4\0\2\6"+
    "\1\7\143\6\1\0\1\6\10\7\1\0\6\7\2\6\2\7\1\0"+
    "\4\7\2\6\12\7\3\6\2\0\1\6\17\0\1\7\1\6\1\7"+
    "\36\6\33\7\2\0\3\6\60\0\46\6\13\7\1\6\u014f\0\3\7"+
    "\66\6\2\0\1\7\1\6\20\7\2\0\1\6\4\7\3\0\12\6"+
    "\2\7\2\0\12\7\21\0\3\7\1\0\10\6\2\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6"+
    "\7\7\2\0\2\7\2\0\3\7\11\0\1\7\4\0\2\6\1\0"+
    "\3\6\2\7\2\0\12\7\4\6\15\0\3\7\1\0\6\6\4\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0"+
    "\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\13\0"+
    "\4\6\1\0\1\6\7\0\14\7\3\6\14\0\3\7\1\0\11\6"+
    "\1\0\3\6\1\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6"+
    "\2\0\1\7\1\6\10\7\1\0\3\7\1\0\3\7\2\0\1\6"+
    "\17\0\2\6\2\7\2\0\12\7\1\0\1\6\17\0\3\7\1\0"+
    "\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0"+
    "\5\6\2\0\1\7\1\6\6\7\3\0\2\7\2\0\3\7\10\0"+
    "\2\7\4\0\2\6\1\0\3\6\4\0\12\7\1\0\1\6\20\0"+
    "\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6"+
    "\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0\10\6"+
    "\1\0\3\6\4\0\5\7\3\0\3\7\1\0\4\7\11\0\1\7"+
    "\17\0\11\7\11\0\1\6\7\0\3\7\1\0\10\6\1\0\3\6"+
    "\1\0\27\6\1\0\12\6\1\0\5\6\4\0\7\7\1\0\3\7"+
    "\1\0\4\7\7\0\2\7\11\0\2\6\4\0\12\7\22\0\2\7"+
    "\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6"+
    "\2\0\1\7\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7"+
    "\7\0\1\6\1\0\2\6\4\0\12\7\22\0\2\7\1\0\10\6"+
    "\1\0\3\6\1\0\27\6\1\0\20\6\4\0\6\7\2\0\3\7"+
    "\1\0\4\7\11\0\1\7\10\0\2\6\4\0\12\7\22\0\2\7"+
    "\1\0\22\6\3\0\30\6\1\0\11\6\1\0\1\6\2\0\7\6"+
    "\3\0\1\7\4\0\6\7\1\0\1\7\1\0\10\7\22\0\2\7"+
    "\15\0\60\6\1\7\2\6\7\7\4\0\10\6\10\7\1\0\12\7"+
    "\47\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6"+
    "\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6"+
    "\2\0\2\6\1\0\4\6\1\7\2\6\6\7\1\0\2\7\1\6"+
    "\2\0\5\6\1\0\1\6\1\0\6\7\2\0\12\7\2\0\2\6"+
    "\42\0\1\6\27\0\2\7\6\0\12\7\13\0\1\7\1\0\1\7"+
    "\1\0\1\7\4\0\2\7\10\6\1\0\42\6\6\0\24\7\1\0"+
    "\2\7\4\6\4\0\10\7\1\0\44\7\11\0\1\7\71\0\42\6"+
    "\1\0\5\6\1\0\2\6\1\0\7\7\3\0\4\7\6\0\12\7"+
    "\6\0\6\6\4\7\106\0\46\6\12\0\51\6\7\0\132\6\5\0"+
    "\104\6\5\0\122\6\6\0\7\6\1\0\77\6\1\0\1\6\1\0"+
    "\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\47\6\1\0"+
    "\1\6\1\0\4\6\2\0\37\6\1\0\1\6\1\0\4\6\2\0"+
    "\7\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0\7\6\1\0"+
    "\27\6\1\0\37\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0"+
    "\47\6\1\0\23\6\16\0\11\7\56\0\125\6\14\0\u026c\6\2\0"+
    "\10\6\12\0\32\6\5\0\113\6\3\0\3\6\17\0\15\6\1\0"+
    "\4\6\3\7\13\0\22\6\3\7\13\0\22\6\2\7\14\0\15\6"+
    "\1\0\3\6\1\0\2\7\14\0\64\6\40\7\3\0\1\6\3\0"+
    "\2\6\1\7\2\0\12\7\41\0\3\7\2\0\12\7\6\0\130\6"+
    "\10\0\51\6\1\7\126\0\35\6\3\0\14\7\4\0\14\7\12\0"+
    "\12\7\36\6\2\0\5\6\u038b\0\154\6\224\0\234\6\4\0\132\6"+
    "\6\0\26\6\2\0\6\6\2\0\46\6\2\0\6\6\2\0\10\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\37\6\2\0\65\6"+
    "\1\0\7\6\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6"+
    "\2\0\6\6\4\0\15\6\5\0\3\6\1\0\7\6\17\0\4\7"+
    "\30\0\1\106\1\106\5\7\20\0\2\6\23\0\1\6\13\0\4\7"+
    "\6\0\6\7\1\0\1\6\15\0\1\6\40\0\22\6\36\0\15\7"+
    "\4\0\1\7\3\0\6\7\27\0\1\6\4\0\1\6\2\0\12\6"+
    "\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\3\6\1\0\7\6\3\0\3\6\5\0\5\6"+
    "\26\0\44\6\u0e81\0\3\6\31\0\11\6\6\7\1\0\5\6\2\0"+
    "\5\6\4\0\126\6\2\0\2\7\2\0\3\6\1\0\137\6\5\0"+
    "\50\6\4\0\136\6\21\0\30\6\70\0\20\6\u0200\0\u19b6\6\112\0"+
    "\u51a6\6\132\0\u048d\6\u0773\0\u2ba4\6\u215c\0\u012e\6\2\0\73\6\225\0"+
    "\7\6\14\0\5\6\5\0\1\6\1\7\12\6\1\0\15\6\1\0"+
    "\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6\41\0"+
    "\u016b\6\22\0\100\6\2\0\66\6\50\0\15\6\3\0\20\7\20\0"+
    "\4\7\17\0\2\6\30\0\3\6\31\0\1\6\6\0\5\6\1\0"+
    "\207\6\2\0\1\7\4\0\1\6\13\0\12\7\7\0\32\6\4\0"+
    "\1\6\1\0\32\6\12\0\132\6\3\0\6\6\2\0\6\6\2\0"+
    "\6\6\2\0\3\6\3\0\2\6\3\0\2\6\22\0\3\7\4\0"+
    "\14\6\1\0\32\6\1\0\23\6\1\0\2\6\1\0\17\6\2\0"+
    "\16\6\42\0\173\6\u0205\0\37\6\21\0\33\6\65\0\36\6\142\0"+
    "\236\6\2\0\12\7\u0356\0\6\6\2\0\1\6\1\0\54\6\1\0"+
    "\2\6\3\0\1\6\2\0\1\6\uc925\0\5\7\3\0\26\7\2\0"+
    "\7\7\36\0\4\7\u0252\0\125\6\1\0\107\6\1\0\2\6\2\0"+
    "\1\6\2\0\2\6\2\0\4\6\1\0\14\6\1\0\1\6\1\0"+
    "\7\6\1\0\101\6\1\0\4\6\2\0\10\6\1\0\7\6\1\0"+
    "\34\6\1\0\4\6\1\0\5\6\1\0\1\6\3\0\7\6\1\0"+
    "\u0152\6\4\0\31\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0"+
    "\37\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0\37\6\1\0"+
    "\31\6\1\0\6\6\4\0\62\7\u2800\0\ua6d7\6\u5129\0\u021e\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\7\36\0\140\7\200\0\360\7\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\2\3\1\4\2\5\1\6\1\3"+
    "\1\7\1\10\20\4\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\4\3\1\24"+
    "\2\25\1\26\2\1\2\27\1\1\1\0\1\2\1\0"+
    "\1\30\1\31\1\32\1\0\3\30\1\33\1\31\1\0"+
    "\1\34\1\0\15\4\1\3\21\4\1\3\5\4\1\3"+
    "\1\35\2\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\12\35\1\0\1\50\2\51\2\30"+
    "\1\31\2\0\15\4\1\52\30\4\1\36\1\0\1\53"+
    "\1\0\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\51\2\30\1\0\11\4\1\65\13\4"+
    "\1\66\10\4\1\67\1\70\1\4\1\51\2\30\1\0"+
    "\6\4\1\71\7\4\1\3\1\4\1\72\1\73\2\4"+
    "\1\74\5\4\1\51\2\30\1\0\3\4\1\75\3\4"+
    "\1\76\4\4\1\77\1\100\1\4\1\101\3\4\1\102"+
    "\2\4\1\51\2\30\1\0\1\103\1\104\2\4\1\105"+
    "\6\4\1\106\1\107\1\4\1\51\2\30\1\0\1\4"+
    "\1\110\4\4\1\111\1\4\1\112\1\51\2\30\1\0"+
    "\1\113\1\4\1\114\1\4\1\115\1\4\1\51\2\30"+
    "\1\0\1\116\1\4\1\0\2\30\1\117\1\4\1\0"+
    "\2\30\1\120\1\0\2\30\1\0\2\30\1\0\2\30"+
    "\1\0\2\30\1\0\1\30\1\31\1\0\5\31";

  private static int [] zzUnpackAction() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\333\0\u016d\0\u01b6"+
    "\0\u01ff\0\u0248\0\u0291\0\u02da\0\u0323\0\333\0\333\0\u036c"+
    "\0\u03b5\0\u03fe\0\u0447\0\u0490\0\u04d9\0\u0522\0\u056b\0\u05b4"+
    "\0\u05fd\0\u0646\0\u068f\0\u06d8\0\u0721\0\u076a\0\u07b3\0\333"+
    "\0\333\0\333\0\333\0\333\0\333\0\333\0\333\0\u07fc"+
    "\0\u0845\0\333\0\333\0\u088e\0\u08d7\0\u0920\0\u0969\0\u09b2"+
    "\0\333\0\333\0\u09fb\0\u0a44\0\u0a8d\0\333\0\u0ad6\0\u0a44"+
    "\0\u0b1f\0\u0b68\0\u0bb1\0\u0bfa\0\333\0\u0c43\0\u0c8c\0\u0cd5"+
    "\0\u0d1e\0\333\0\u0d67\0\u0db0\0\333\0\u0df9\0\u0e42\0\u0e8b"+
    "\0\u0ed4\0\u0f1d\0\u0f66\0\u0faf\0\u0ff8\0\u1041\0\u108a\0\u10d3"+
    "\0\u111c\0\u1165\0\u11ae\0\u01ff\0\u11f7\0\u1240\0\u1289\0\u12d2"+
    "\0\u131b\0\u1364\0\u13ad\0\u13f6\0\u143f\0\u1488\0\u14d1\0\u151a"+
    "\0\u1563\0\u15ac\0\u15f5\0\u163e\0\u1687\0\u16d0\0\u1719\0\u1762"+
    "\0\u17ab\0\u17f4\0\u183d\0\u1886\0\333\0\u18cf\0\u1918\0\333"+
    "\0\333\0\333\0\333\0\333\0\333\0\333\0\333\0\333"+
    "\0\u1961\0\u19aa\0\u19f3\0\u1a3c\0\u1a85\0\u1ace\0\u1b17\0\u1b60"+
    "\0\u1ba9\0\u1bf2\0\u1c3b\0\333\0\u1c84\0\u1ccd\0\u1d16\0\u1d5f"+
    "\0\u1da8\0\u1df1\0\u1e3a\0\u1e83\0\u1ecc\0\u1f15\0\u1f5e\0\u1fa7"+
    "\0\u1ff0\0\u2039\0\u2082\0\u20cb\0\u2114\0\u215d\0\u21a6\0\u21ef"+
    "\0\u2238\0\u2281\0\u22ca\0\u2313\0\u235c\0\u23a5\0\u23ee\0\u2437"+
    "\0\u2480\0\u24c9\0\u2512\0\u255b\0\u25a4\0\u25ed\0\u2636\0\u267f"+
    "\0\u26c8\0\u2711\0\u275a\0\u27a3\0\u27ec\0\u2835\0\u287e\0\u28c7"+
    "\0\u2910\0\333\0\u19aa\0\333\0\u2959\0\333\0\333\0\333"+
    "\0\333\0\333\0\333\0\333\0\333\0\333\0\u29a2\0\u29eb"+
    "\0\u2a34\0\u2a7d\0\u2ac6\0\u2b0f\0\u2b58\0\u2ba1\0\u2bea\0\u2c33"+
    "\0\u2c7c\0\u2cc5\0\u2d0e\0\u01ff\0\u2d57\0\u2da0\0\u2de9\0\u2e32"+
    "\0\u2e7b\0\u2ec4\0\u2f0d\0\u2f56\0\u2f9f\0\u2fe8\0\u3031\0\u01ff"+
    "\0\u307a\0\u30c3\0\u310c\0\u3155\0\u319e\0\u31e7\0\u3230\0\u3279"+
    "\0\u01ff\0\u01ff\0\u32c2\0\u330b\0\u3354\0\u339d\0\u33e6\0\u342f"+
    "\0\u3478\0\u34c1\0\u350a\0\u3553\0\u359c\0\u01ff\0\u35e5\0\u362e"+
    "\0\u3677\0\u36c0\0\u3709\0\u3752\0\u379b\0\u37e4\0\u382d\0\u3876"+
    "\0\u01ff\0\u38bf\0\u3908\0\u01ff\0\u3951\0\u399a\0\u39e3\0\u3a2c"+
    "\0\u3a75\0\u3abe\0\u3b07\0\u3b50\0\u3b99\0\u3be2\0\u3c2b\0\u3c74"+
    "\0\u01ff\0\u3cbd\0\u3d06\0\u3d4f\0\u01ff\0\u3d98\0\u3de1\0\u3e2a"+
    "\0\u3e73\0\u01ff\0\u01ff\0\u3ebc\0\u01ff\0\u3f05\0\u3f4e\0\u3f97"+
    "\0\u01ff\0\u3fe0\0\u4029\0\u4072\0\u40bb\0\u4104\0\u414d\0\u01ff"+
    "\0\u01ff\0\u4196\0\u41df\0\u01ff\0\u4228\0\u4271\0\u42ba\0\u4303"+
    "\0\u434c\0\u4395\0\u01ff\0\u01ff\0\u43de\0\u4427\0\u4470\0\u44b9"+
    "\0\u4502\0\u454b\0\u01ff\0\u4594\0\u45dd\0\u4626\0\u466f\0\u01ff"+
    "\0\u46b8\0\u01ff\0\u4701\0\u474a\0\u4793\0\u47dc\0\u01ff\0\u4825"+
    "\0\u01ff\0\u486e\0\u01ff\0\u48b7\0\u4900\0\u4949\0\u4992\0\u49db"+
    "\0\u01ff\0\u4a24\0\u4a6d\0\u4ab6\0\u4aff\0\333\0\u4b48\0\u4b91"+
    "\0\u4bda\0\u4c23\0\u01ff\0\u4c6c\0\u4cb5\0\u4cfe\0\u4d47\0\u4d90"+
    "\0\u4dd9\0\u4e22\0\u4e6b\0\u4eb4\0\u4efd\0\u4f46\0\u4f8f\0\u4fd8"+
    "\0\u5021\0\u5021\0\u506a\0\u50b3\0\u50fc\0\u5145\0\u518e\0\u51d7";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\4\1\12"+
    "\1\13\3\11\3\13\1\11\1\14\1\11\1\15\1\16"+
    "\1\17\1\4\1\20\1\21\1\22\1\11\1\23\1\24"+
    "\1\25\2\11\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\11\1\34\1\11\1\35\1\36\1\11\1\37\2\11"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\2\10\1\53\1\54\1\55\1\56"+
    "\5\13\1\11\1\0\1\6\1\0\1\57\1\60\1\61"+
    "\21\57\1\62\1\57\1\63\62\57\1\64\1\65\1\66"+
    "\22\64\1\4\1\67\57\64\3\70\113\0\1\6\112\0"+
    "\1\71\1\72\64\0\1\53\110\0\1\53\24\0\13\11"+
    "\1\0\1\11\4\0\30\11\21\0\6\11\2\0\1\11"+
    "\10\0\1\73\1\74\1\75\1\76\1\0\1\77\1\100"+
    "\1\101\1\102\1\103\1\104\11\0\1\104\6\0\1\102"+
    "\1\75\1\0\1\76\1\105\30\0\1\77\2\101\1\74"+
    "\1\101\1\105\13\0\2\13\1\75\2\0\3\13\1\102"+
    "\1\103\1\104\11\0\1\104\6\0\1\102\1\75\2\0"+
    "\1\105\30\0\5\13\1\105\13\0\2\103\3\0\3\103"+
    "\60\0\5\103\27\0\1\53\46\0\1\53\5\0\1\106"+
    "\16\0\13\11\1\0\1\11\4\0\1\11\1\107\7\11"+
    "\1\110\12\11\1\111\3\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\23\11\1\112\4\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\113\6\11\1\114\4\11\1\115\3\11"+
    "\1\116\6\11\21\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\10\11\1\117\17\11\21\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\15\11"+
    "\1\120\1\11\1\121\10\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\7\11\1\122\3\11"+
    "\1\123\1\124\13\11\21\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\5\11\1\125\22\11\21\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\11\11\1\126\7\11\1\127\6\11\21\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\1\11\1\130"+
    "\3\11\1\131\16\11\1\132\3\11\21\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\1\11\1\133"+
    "\4\11\1\134\1\11\1\135\4\11\1\136\12\11\21\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\137\17\11\21\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\12\11\1\140\6\11\1\141"+
    "\1\142\1\11\1\143\1\11\1\144\1\11\21\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\5\11"+
    "\1\145\2\11\1\146\17\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\21\11\1\147\6\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\10\11\1\150\1\151\14\11\1\152\1\11\21\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\153\17\11\21\0\6\11\2\0\1\11\67\0"+
    "\1\154\2\0\1\53\106\0\1\10\1\0\1\53\110\0"+
    "\1\53\2\0\1\53\105\0\1\53\3\0\1\53\104\0"+
    "\1\53\4\0\1\53\11\0\1\57\2\0\21\57\1\0"+
    "\1\57\1\0\62\57\2\0\1\61\106\0\1\155\2\0"+
    "\5\155\1\156\4\155\2\156\1\157\4\155\1\160\1\161"+
    "\1\162\11\155\1\163\1\164\1\165\1\166\6\155\1\167"+
    "\25\155\1\156\2\157\1\155\1\157\1\155\30\0\1\170"+
    "\65\0\1\66\106\0\1\155\2\0\5\155\1\171\4\155"+
    "\2\171\1\172\4\155\1\173\1\174\1\175\11\155\1\176"+
    "\1\177\1\200\1\201\6\155\1\202\25\155\1\171\2\172"+
    "\1\155\1\172\1\155\3\0\1\71\1\5\1\6\106\71"+
    "\5\72\1\203\103\72\10\0\1\73\1\74\1\204\2\0"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\11\0\1\104"+
    "\6\0\1\102\1\204\2\0\1\105\30\0\1\77\2\101"+
    "\1\74\1\101\1\105\13\0\2\74\3\0\3\74\1\102"+
    "\1\103\1\104\11\0\1\104\6\0\1\102\3\0\1\105"+
    "\30\0\5\74\1\105\13\0\1\205\1\206\2\0\5\206"+
    "\1\0\1\206\5\0\2\206\2\0\1\206\6\0\1\206"+
    "\3\0\1\206\2\0\1\206\25\0\6\206\13\0\1\207"+
    "\1\74\1\204\2\0\3\207\1\102\1\103\1\104\11\0"+
    "\1\104\6\0\1\102\1\204\2\0\1\105\30\0\3\207"+
    "\1\74\1\207\1\105\13\0\1\101\1\74\1\204\2\0"+
    "\3\101\1\102\1\103\1\104\11\0\1\104\6\0\1\102"+
    "\1\204\2\0\1\105\30\0\3\101\1\74\1\101\1\105"+
    "\13\0\1\210\1\74\1\204\2\0\3\210\1\102\1\103"+
    "\1\104\11\0\1\104\6\0\1\102\1\204\2\0\1\105"+
    "\30\0\3\210\1\74\1\210\1\105\13\0\2\103\3\0"+
    "\3\103\1\102\1\0\1\104\11\0\1\104\6\0\1\102"+
    "\3\0\1\105\30\0\5\103\1\105\13\0\2\211\3\0"+
    "\3\211\3\0\1\212\53\0\1\212\5\211\22\0\1\213"+
    "\100\0\13\11\1\0\1\11\4\0\2\11\1\214\25\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\6\11\1\215\1\11\1\216\17\11\21\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\23\11"+
    "\1\217\4\11\21\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\16\11\1\220\11\11\21\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\12\11"+
    "\1\221\3\11\1\222\11\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\13\11\1\223\14\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\224\26\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\11\1\225\26\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\12\11\1\226\15\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\16\11\1\222\11\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\12\11\1\227\15\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\230\27\11\21\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\12\11\1\231\3\11\1\232\11\11\21\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\12\11\1\233"+
    "\15\11\21\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\11\1\234\22\11\1\222\1\11\1\124"+
    "\1\11\21\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\6\11\1\235\2\11\1\236\16\11\21\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\12\11\1\237\15\11\21\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\22\11\1\124\5\11\21\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\15\11\1\240\12\11\21\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\15\11\1\120\12\11\21\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\13\11\1\241\14\11\21\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\11\11\1\124\16\11\21\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\242\17\11\21\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\13\11\1\243\14\11\21\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\244\7\11\1\245\16\11\21\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\10\11\1\246"+
    "\17\11\21\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\6\11\1\247\21\11\21\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\1\250\27\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\13\11\1\251\14\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\14\11\1\252\13\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\24\11\1\253\3\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\6\11\1\254\21\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\10\11\1\255\17\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\5\11\1\256\22\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\12\11\1\257\15\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\6\11\1\260\6\11"+
    "\1\261\12\11\21\0\6\11\2\0\1\11\67\0\1\10"+
    "\2\0\1\53\26\0\1\157\4\0\3\157\60\0\3\157"+
    "\1\0\1\157\14\0\1\262\4\0\3\262\60\0\3\262"+
    "\1\0\1\262\14\0\1\263\4\0\3\263\5\0\1\264"+
    "\52\0\3\263\1\0\1\263\14\0\1\265\4\0\3\265"+
    "\5\0\1\264\52\0\3\265\1\0\1\265\31\0\1\266"+
    "\110\0\1\267\110\0\1\270\110\0\1\271\110\0\1\272"+
    "\110\0\1\273\110\0\1\274\110\0\1\275\63\0\4\72"+
    "\1\6\1\203\103\72\10\0\1\205\1\206\1\276\1\0"+
    "\5\206\1\0\1\206\5\0\2\206\2\0\1\206\6\0"+
    "\1\206\1\276\2\0\1\206\2\0\1\206\25\0\6\206"+
    "\13\0\2\277\1\276\1\0\5\277\1\0\1\277\5\0"+
    "\2\277\2\0\1\277\6\0\1\277\1\276\2\0\1\277"+
    "\2\0\1\277\25\0\6\277\13\0\1\300\1\74\1\204"+
    "\2\0\3\300\1\102\1\103\1\104\11\0\1\104\6\0"+
    "\1\102\1\204\2\0\1\105\30\0\3\300\1\74\1\300"+
    "\1\105\13\0\1\301\1\74\1\204\2\0\3\301\1\102"+
    "\1\103\1\104\11\0\1\104\6\0\1\102\1\204\2\0"+
    "\1\105\30\0\3\301\1\74\1\301\1\105\13\0\2\211"+
    "\3\0\3\211\1\102\22\0\1\102\3\0\1\105\30\0"+
    "\5\211\1\105\13\0\2\211\3\0\3\211\60\0\5\211"+
    "\105\0\1\302\15\0\13\11\1\0\1\11\4\0\3\11"+
    "\1\303\24\11\21\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\25\11\1\304\2\11\21\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\12\11"+
    "\1\305\15\11\21\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\15\11\1\306\12\11\21\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\12\11"+
    "\1\307\15\11\21\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\310\25\11\21\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\5\11"+
    "\1\124\22\11\21\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\12\11\1\311\3\11\1\312\11\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\16\11\1\313\11\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\11\11\1\314\16\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\10\11\1\124\17\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\5\11\1\315\22\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\10\11\1\316\4\11\1\317\12\11\21\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\5\11"+
    "\1\320\22\11\21\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\12\11\1\321\15\11\21\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\24\11"+
    "\1\322\3\11\21\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\13\11\1\323\14\11\21\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\16\11"+
    "\1\124\11\11\21\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\10\11\1\324\17\11\21\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\6\11"+
    "\1\325\21\11\21\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\15\11\1\124\12\11\21\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\326\26\11\21\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\327\26\11\21\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\4\11"+
    "\1\330\23\11\21\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\12\11\1\331\15\11\21\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\6\11"+
    "\1\332\21\11\21\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\11\11\1\333\16\11\21\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\12\11"+
    "\1\221\15\11\21\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\5\11\1\135\22\11\21\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\2\11"+
    "\1\334\25\11\21\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\335\26\11\21\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\23\11"+
    "\1\336\4\11\21\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\15\11\1\222\12\11\21\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\15\11"+
    "\1\337\12\11\21\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\340\26\11\21\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\5\11"+
    "\1\341\22\11\21\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\20\11\1\342\7\11\21\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\343\26\11\21\0\6\11\2\0\1\11\25\0\1\264"+
    "\73\0\2\344\1\276\1\0\5\344\1\0\1\344\5\0"+
    "\2\344\2\0\1\344\6\0\1\344\1\276\2\0\1\344"+
    "\2\0\1\344\25\0\6\344\13\0\1\345\1\74\1\204"+
    "\2\0\3\345\1\102\1\103\1\104\11\0\1\104\6\0"+
    "\1\102\1\204\2\0\1\105\30\0\3\345\1\74\1\345"+
    "\1\105\13\0\1\346\1\74\1\204\2\0\3\346\1\102"+
    "\1\103\1\104\11\0\1\104\6\0\1\102\1\204\2\0"+
    "\1\105\30\0\3\346\1\74\1\346\1\105\105\0\1\347"+
    "\14\0\13\11\1\0\1\11\4\0\1\11\1\350\26\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\351\26\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\5\11\1\352\22\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\6\11\1\353\21\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\11\11\1\354\16\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\21\11\1\124\6\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\6\11\1\355\21\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\12\11\1\124\15\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\16\11\1\356\11\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\13\11\1\357\14\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\11\11\1\360\16\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\5\11\1\361\22\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\11\11\1\362\16\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\363\26\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\11\11\1\364\16\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\16\11\1\365\11\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\22\11\1\366\5\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\25\11\1\367\2\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\15\11\1\370\12\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\12\11\1\371\15\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\6\11\1\372\21\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\373\25\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\12\11\1\374\15\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\21\11\1\375\6\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\24\11\1\376\3\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\15\11\1\377\12\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\5\11\1\u0100\22\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\3\11\1\124\24\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\12\11\1\u0101\15\11"+
    "\21\0\6\11\2\0\1\11\10\0\2\u0102\1\276\1\0"+
    "\5\u0102\1\0\1\u0102\5\0\2\u0102\2\0\1\u0102\6\0"+
    "\1\u0102\1\276\2\0\1\u0102\2\0\1\u0102\25\0\6\u0102"+
    "\13\0\1\u0103\1\74\1\204\2\0\3\u0103\1\102\1\103"+
    "\1\104\11\0\1\104\6\0\1\102\1\204\2\0\1\105"+
    "\30\0\3\u0103\1\74\1\u0103\1\105\13\0\1\u0104\1\74"+
    "\1\204\2\0\3\u0104\1\102\1\103\1\104\11\0\1\104"+
    "\6\0\1\102\1\204\2\0\1\105\30\0\3\u0104\1\74"+
    "\1\u0104\1\105\104\0\1\u0105\15\0\13\11\1\0\1\11"+
    "\4\0\4\11\1\u0106\23\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\12\11\1\u0107\15\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\u0108\25\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\2\11\1\u0109\25\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\u010a\26\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\13\11\1\u010b\14\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\20\11\1\u010c\7\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\12\11\1\u010d\15\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\7\11\1\u010e\20\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\14\11\1\u010f\13\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\13\11\1\u0110\14\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\13\11\1\124\14\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\6\11\1\u0111\21\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\16\11\1\u0112\11\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\5\11\1\u0113\22\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\15\11\1\u0114\12\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\u0115\25\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\12\11\1\u0116\15\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\11\11\1\u0117\16\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\15\11\1\u0118\12\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\5\11\1\u0119\22\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\11\1\u011a\26\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\6\11\1\u011b\21\11\21\0\6\11\2\0\1\11"+
    "\10\0\2\u011c\1\276\1\0\5\u011c\1\0\1\u011c\5\0"+
    "\2\u011c\2\0\1\u011c\6\0\1\u011c\1\276\2\0\1\u011c"+
    "\2\0\1\u011c\25\0\6\u011c\13\0\1\u011d\1\74\1\204"+
    "\2\0\3\u011d\1\102\1\103\1\104\11\0\1\104\6\0"+
    "\1\102\1\204\2\0\1\105\30\0\3\u011d\1\74\1\u011d"+
    "\1\105\13\0\1\u011e\1\74\1\204\2\0\3\u011e\1\102"+
    "\1\103\1\104\11\0\1\104\6\0\1\102\1\204\2\0"+
    "\1\105\30\0\3\u011e\1\74\1\u011e\1\105\106\0\1\u011f"+
    "\13\0\13\11\1\0\1\11\4\0\5\11\1\u0120\22\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\5\11\1\u0121\22\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\12\11\1\u0122\15\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\u0123\25\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\24\11\1\222\3\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\16\11\1\u0124\11\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\5\11\1\u0125\22\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\u0126\26\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\2\11\1\u0127\25\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\5\11\1\u0128\22\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\26\11\1\124\1\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\14\11\1\u0129\13\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\10\11\1\u012a\17\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\12\11\1\u012b\15\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\13\11\1\u012c\14\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\15\11\1\u012d\12\11\21\0\6\11\2\0\1\11"+
    "\10\0\2\u012e\1\276\1\0\5\u012e\1\0\1\u012e\5\0"+
    "\2\u012e\2\0\1\u012e\6\0\1\u012e\1\276\2\0\1\u012e"+
    "\2\0\1\u012e\25\0\6\u012e\13\0\1\u012f\1\74\1\204"+
    "\2\0\3\u012f\1\102\1\103\1\104\11\0\1\104\6\0"+
    "\1\102\1\204\2\0\1\105\30\0\3\u012f\1\74\1\u012f"+
    "\1\105\13\0\1\u0130\1\74\1\204\2\0\3\u0130\1\102"+
    "\1\103\1\104\11\0\1\104\6\0\1\102\1\204\2\0"+
    "\1\105\30\0\3\u0130\1\74\1\u0130\1\105\20\0\1\u0131"+
    "\101\0\13\11\1\0\1\11\4\0\5\11\1\u0132\22\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\12\11\1\u0133\15\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\13\11\1\u0134\14\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\u0135\25\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\5\11\1\u0136\22\11"+
    "\21\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\13\11\1\u0137\14\11\21\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\u0138\27\11\21\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\13\11\1\u0139\14\11\21\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\5\11\1\u013a\22\11\21\0"+
    "\6\11\2\0\1\11\10\0\2\u013b\1\276\1\0\5\u013b"+
    "\1\0\1\u013b\5\0\2\u013b\2\0\1\u013b\6\0\1\u013b"+
    "\1\276\2\0\1\u013b\2\0\1\u013b\25\0\6\u013b\13\0"+
    "\1\u013c\1\74\1\204\2\0\3\u013c\1\102\1\103\1\104"+
    "\11\0\1\104\6\0\1\102\1\204\2\0\1\105\30\0"+
    "\3\u013c\1\74\1\u013c\1\105\13\0\1\u013d\1\74\1\204"+
    "\2\0\3\u013d\1\102\1\103\1\104\11\0\1\104\6\0"+
    "\1\102\1\204\2\0\1\105\30\0\3\u013d\1\74\1\u013d"+
    "\1\105\107\0\1\u013e\12\0\13\11\1\0\1\11\4\0"+
    "\20\11\1\u013f\7\11\21\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\12\11\1\u0140\15\11\21\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\5\11\1\u0141\22\11\21\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\10\11\1\u0142\17\11\21\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\12\11\1\u0143\15\11\21\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\6\11\1\u0144\21\11\21\0"+
    "\6\11\2\0\1\11\10\0\2\u0145\1\276\1\0\5\u0145"+
    "\1\0\1\u0145\5\0\2\u0145\2\0\1\u0145\6\0\1\u0145"+
    "\1\276\2\0\1\u0145\2\0\1\u0145\25\0\6\u0145\13\0"+
    "\1\u0146\1\74\1\204\2\0\3\u0146\1\102\1\103\1\104"+
    "\11\0\1\104\6\0\1\102\1\204\2\0\1\105\30\0"+
    "\3\u0146\1\74\1\u0146\1\105\13\0\1\u0147\1\74\1\204"+
    "\2\0\3\u0147\1\102\1\103\1\104\11\0\1\104\6\0"+
    "\1\102\1\204\2\0\1\105\30\0\3\u0147\1\74\1\u0147"+
    "\1\105\104\0\1\u0148\15\0\13\11\1\0\1\11\4\0"+
    "\16\11\1\u0149\11\11\21\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\14\11\1\124\13\11\21\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\27\11\1\u014a\21\0\6\11\2\0\1\11\10\0\2\u014b"+
    "\1\276\1\0\5\u014b\1\0\1\u014b\5\0\2\u014b\2\0"+
    "\1\u014b\6\0\1\u014b\1\276\2\0\1\u014b\2\0\1\u014b"+
    "\25\0\6\u014b\13\0\1\u014c\1\74\1\204\2\0\3\u014c"+
    "\1\102\1\103\1\104\11\0\1\104\6\0\1\102\1\204"+
    "\2\0\1\105\30\0\3\u014c\1\74\1\u014c\1\105\13\0"+
    "\1\u014d\1\74\1\204\2\0\3\u014d\1\102\1\103\1\104"+
    "\11\0\1\104\6\0\1\102\1\204\2\0\1\105\30\0"+
    "\3\u014d\1\74\1\u014d\1\105\106\0\1\u014e\13\0\13\11"+
    "\1\0\1\11\4\0\5\11\1\u014f\22\11\21\0\6\11"+
    "\2\0\1\11\10\0\2\u0150\1\276\1\0\5\u0150\1\0"+
    "\1\u0150\5\0\2\u0150\2\0\1\u0150\6\0\1\u0150\1\276"+
    "\2\0\1\u0150\2\0\1\u0150\25\0\6\u0150\13\0\1\u0151"+
    "\1\74\1\204\2\0\3\u0151\1\102\1\103\1\104\11\0"+
    "\1\104\6\0\1\102\1\204\2\0\1\105\30\0\3\u0151"+
    "\1\74\1\u0151\1\105\13\0\1\u0152\1\74\1\204\2\0"+
    "\3\u0152\1\102\1\103\1\104\11\0\1\104\6\0\1\102"+
    "\1\204\2\0\1\105\30\0\3\u0152\1\74\1\u0152\1\105"+
    "\11\0\13\11\1\0\1\11\4\0\20\11\1\u0153\7\11"+
    "\21\0\6\11\2\0\1\11\10\0\2\u0154\1\276\1\0"+
    "\5\u0154\1\0\1\u0154\5\0\2\u0154\2\0\1\u0154\6\0"+
    "\1\u0154\1\276\2\0\1\u0154\2\0\1\u0154\25\0\6\u0154"+
    "\13\0\1\u0155\1\74\1\204\2\0\3\u0155\1\102\1\103"+
    "\1\104\11\0\1\104\6\0\1\102\1\204\2\0\1\105"+
    "\30\0\3\u0155\1\74\1\u0155\1\105\13\0\1\u0156\1\74"+
    "\1\204\2\0\3\u0156\1\102\1\103\1\104\11\0\1\104"+
    "\6\0\1\102\1\204\2\0\1\105\30\0\3\u0156\1\74"+
    "\1\u0156\1\105\13\0\2\u0157\1\276\1\0\5\u0157\1\0"+
    "\1\u0157\5\0\2\u0157\2\0\1\u0157\6\0\1\u0157\1\276"+
    "\2\0\1\u0157\2\0\1\u0157\25\0\6\u0157\13\0\1\u0158"+
    "\1\74\1\204\2\0\3\u0158\1\102\1\103\1\104\11\0"+
    "\1\104\6\0\1\102\1\204\2\0\1\105\30\0\3\u0158"+
    "\1\74\1\u0158\1\105\13\0\1\u0159\1\74\1\204\2\0"+
    "\3\u0159\1\102\1\103\1\104\11\0\1\104\6\0\1\102"+
    "\1\204\2\0\1\105\30\0\3\u0159\1\74\1\u0159\1\105"+
    "\13\0\2\u015a\1\276\1\0\5\u015a\1\0\1\u015a\5\0"+
    "\2\u015a\2\0\1\u015a\6\0\1\u015a\1\276\2\0\1\u015a"+
    "\2\0\1\u015a\25\0\6\u015a\13\0\1\u015b\1\74\1\204"+
    "\2\0\3\u015b\1\102\1\103\1\104\11\0\1\104\6\0"+
    "\1\102\1\204\2\0\1\105\30\0\3\u015b\1\74\1\u015b"+
    "\1\105\13\0\1\u015c\1\74\1\204\2\0\3\u015c\1\102"+
    "\1\103\1\104\11\0\1\104\6\0\1\102\1\204\2\0"+
    "\1\105\30\0\3\u015c\1\74\1\u015c\1\105\13\0\2\u015d"+
    "\1\276\1\0\5\u015d\1\0\1\u015d\5\0\2\u015d\2\0"+
    "\1\u015d\6\0\1\u015d\1\276\2\0\1\u015d\2\0\1\u015d"+
    "\25\0\6\u015d\13\0\1\u015e\1\74\1\204\2\0\3\u015e"+
    "\1\102\1\103\1\104\11\0\1\104\6\0\1\102\1\204"+
    "\2\0\1\105\30\0\3\u015e\1\74\1\u015e\1\105\13\0"+
    "\1\u015f\1\74\1\204\2\0\3\u015f\1\102\1\103\1\104"+
    "\11\0\1\104\6\0\1\102\1\204\2\0\1\105\30\0"+
    "\3\u015f\1\74\1\u015f\1\105\13\0\2\u0160\1\276\1\0"+
    "\5\u0160\1\0\1\u0160\5\0\2\u0160\2\0\1\u0160\6\0"+
    "\1\u0160\1\276\2\0\1\u0160\2\0\1\u0160\25\0\6\u0160"+
    "\13\0\1\u0161\1\74\1\204\2\0\3\u0161\1\102\1\103"+
    "\1\104\11\0\1\104\6\0\1\102\1\204\2\0\1\105"+
    "\30\0\3\u0161\1\74\1\u0161\1\105\13\0\1\u0162\1\74"+
    "\1\204\2\0\3\u0162\1\102\1\103\1\104\11\0\1\104"+
    "\6\0\1\102\1\204\2\0\1\105\30\0\3\u0162\1\74"+
    "\1\u0162\1\105\13\0\2\u0163\1\276\1\0\5\u0163\1\0"+
    "\1\u0163\5\0\2\u0163\2\0\1\u0163\6\0\1\u0163\1\276"+
    "\2\0\1\u0163\2\0\1\u0163\25\0\6\u0163\13\0\1\u0164"+
    "\1\74\1\204\2\0\3\u0164\1\102\1\103\1\104\11\0"+
    "\1\104\6\0\1\102\1\204\2\0\1\105\30\0\3\u0164"+
    "\1\74\1\u0164\1\105\15\0\1\276\31\0\1\276\54\0"+
    "\1\u0165\1\74\1\204\2\0\3\u0165\1\102\1\103\1\104"+
    "\11\0\1\104\6\0\1\102\1\204\2\0\1\105\30\0"+
    "\3\u0165\1\74\1\u0165\1\105\13\0\1\u0166\1\74\1\204"+
    "\2\0\3\u0166\1\102\1\103\1\104\11\0\1\104\6\0"+
    "\1\102\1\204\2\0\1\105\30\0\3\u0166\1\74\1\u0166"+
    "\1\105\13\0\1\u0167\1\74\1\204\2\0\3\u0167\1\102"+
    "\1\103\1\104\11\0\1\104\6\0\1\102\1\204\2\0"+
    "\1\105\30\0\3\u0167\1\74\1\u0167\1\105\13\0\1\u0168"+
    "\1\74\1\204\2\0\3\u0168\1\102\1\103\1\104\11\0"+
    "\1\104\6\0\1\102\1\204\2\0\1\105\30\0\3\u0168"+
    "\1\74\1\u0168\1\105\13\0\2\74\1\204\2\0\3\74"+
    "\1\102\1\103\1\104\11\0\1\104\6\0\1\102\1\204"+
    "\2\0\1\105\30\0\5\74\1\105\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21024];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\7\1\2\11\20\1\10\11"+
    "\2\1\2\11\5\1\2\11\3\1\1\11\1\1\1\0"+
    "\1\1\1\0\2\1\1\11\1\0\3\1\1\11\1\1"+
    "\1\0\1\11\1\0\46\1\1\11\2\1\11\11\12\1"+
    "\1\0\1\11\5\1\2\0\46\1\1\11\1\0\1\11"+
    "\1\0\11\11\3\1\1\0\44\1\1\0\35\1\1\0"+
    "\31\1\1\0\21\1\1\0\14\1\1\0\11\1\1\0"+
    "\2\1\1\0\2\1\1\11\1\1\1\0\3\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuilder string = new StringBuilder();

  private Token token(TokenType type) {
    return createToken(type, yyline+1, yycolumn+1, yytext());
  }

  private Token token(TokenType type, Object value) {
    return createToken(type, yyline+1, yycolumn+1, yytext(), value);
  }

  @NotNull
  @Override
  public Token nextToken() throws java.io.IOException {
    return next_token();
  }

  /**
   * assumes correct representation of a long value for
   * specified radix in scanner buffer from <code>start</code>
   * to <code>end</code>
   */
  private long parseLong(int start, int end, int radix) {
    long result = 0;
    long digit;

    for (int i = start; i < end; i++) {
      digit  = Character.digit(yycharat(i),radix);
      result*= radix;
      result+= digit;
    }

    return result;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaStubLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2058) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  private final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  private final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  private final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  private final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  private final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  private final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  private final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private Token next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return token(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);
            }
          case 81: break;
          case 2: 
            { /* ignore */
            }
          case 82: break;
          case 3: 
            { return token(OTHER);
            }
          case 83: break;
          case 4: 
            { return token(IDENTIFIER, yytext());
            }
          case 84: break;
          case 5: 
            { return token(NUMBER, new Integer(yytext()));
            }
          case 85: break;
          case 6: 
            { return token(DOT);
            }
          case 86: break;
          case 7: 
            { yybegin(STRING); string.setLength(0);
            }
          case 87: break;
          case 8: 
            { yybegin(CHARLITERAL);
            }
          case 88: break;
          case 9: 
            { return token(LPAREN);
            }
          case 89: break;
          case 10: 
            { return token(RPAREN);
            }
          case 90: break;
          case 11: 
            { return token(LBRACE);
            }
          case 91: break;
          case 12: 
            { return token(RBRACE);
            }
          case 92: break;
          case 13: 
            { return token(LBRACK);
            }
          case 93: break;
          case 14: 
            { return token(RBRACK);
            }
          case 94: break;
          case 15: 
            { return token(SEMICOLON);
            }
          case 95: break;
          case 16: 
            { return token(COMMA);
            }
          case 96: break;
          case 17: 
            { return token(GT);
            }
          case 97: break;
          case 18: 
            { return token(LT);
            }
          case 98: break;
          case 19: 
            { return token(COLON);
            }
          case 99: break;
          case 20: 
            { string.append( yytext() );
            }
          case 100: break;
          case 21: 
            { throw new RuntimeException("Unterminated string at end of line");
            }
          case 101: break;
          case 22: 
            { yybegin(YYINITIAL); return token(STRING_LITERAL, string.toString());
            }
          case 102: break;
          case 23: 
            { throw new RuntimeException("Unterminated character literal at end of line");
            }
          case 103: break;
          case 24: 
            { return token(NUMBER, new Integer((int) parseLong(0, yylength(), 8)));
            }
          case 104: break;
          case 25: 
            { return token(NUMBER, new Double(yytext()));
            }
          case 105: break;
          case 26: 
            { return token(NUMBER, new Long(yytext().substring(0,yylength()-1)));
            }
          case 106: break;
          case 27: 
            { return token(NUMBER, new Float(yytext().substring(0,yylength()-1)));
            }
          case 107: break;
          case 28: 
            { return token(NUMBER, new Double(yytext().substring(0,yylength()-1)));
            }
          case 108: break;
          case 29: 
            { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
            }
          case 109: break;
          case 30: 
            { char val = (char) Integer.parseInt(yytext().substring(1),8);
                        				   string.append( val );
            }
          case 110: break;
          case 31: 
            { string.append( '\"' );
            }
          case 111: break;
          case 32: 
            { string.append( '\'' );
            }
          case 112: break;
          case 33: 
            { string.append( '\\' );
            }
          case 113: break;
          case 34: 
            { string.append( '\r' );
            }
          case 114: break;
          case 35: 
            { string.append( '\t' );
            }
          case 115: break;
          case 36: 
            { string.append( '\n' );
            }
          case 116: break;
          case 37: 
            { string.append( '\f' );
            }
          case 117: break;
          case 38: 
            { string.append( '\b' );
            }
          case 118: break;
          case 39: 
            { yybegin(YYINITIAL); return token(CHARACTER_LITERAL, yytext().charAt(0));
            }
          case 119: break;
          case 40: 
            { return token(NUMBER, new Long(parseLong(0, yylength()-1, 8)));
            }
          case 120: break;
          case 41: 
            { return token(NUMBER, new Integer((int) parseLong(2, yylength(), 16)));
            }
          case 121: break;
          case 42: 
            { return token(INT);
            }
          case 122: break;
          case 43: 
            { yybegin(YYINITIAL);
			                              int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
			                            return token(CHARACTER_LITERAL, (char)val);
            }
          case 123: break;
          case 44: 
            { yybegin(YYINITIAL); return token(CHARACTER_LITERAL, '\"');
            }
          case 124: break;
          case 45: 
            { yybegin(YYINITIAL); return token(CHARACTER_LITERAL, '\'');
            }
          case 125: break;
          case 46: 
            { yybegin(YYINITIAL); return token(CHARACTER_LITERAL, '\\');
            }
          case 126: break;
          case 47: 
            { yybegin(YYINITIAL); return token(CHARACTER_LITERAL, '\r');
            }
          case 127: break;
          case 48: 
            { yybegin(YYINITIAL); return token(CHARACTER_LITERAL, '\t');
            }
          case 128: break;
          case 49: 
            { yybegin(YYINITIAL); return token(CHARACTER_LITERAL, '\n');
            }
          case 129: break;
          case 50: 
            { yybegin(YYINITIAL); return token(CHARACTER_LITERAL, '\f');
            }
          case 130: break;
          case 51: 
            { yybegin(YYINITIAL); return token(CHARACTER_LITERAL, '\b');
            }
          case 131: break;
          case 52: 
            { return token(NUMBER, new Long(parseLong(2, yylength()-1, 16)));
            }
          case 132: break;
          case 53: 
            { return token(CHAR);
            }
          case 133: break;
          case 54: 
            { return token(LONG);
            }
          case 134: break;
          case 55: 
            { return token(BYTE);
            }
          case 135: break;
          case 56: 
            { return token(VOID);
            }
          case 136: break;
          case 57: 
            { return token(CLASS);
            }
          case 137: break;
          case 58: 
            { return token(FINAL);
            }
          case 138: break;
          case 59: 
            { return token(FLOAT);
            }
          case 139: break;
          case 60: 
            { return token(SHORT);
            }
          case 140: break;
          case 61: 
            { return token(PUBLIC);
            }
          case 141: break;
          case 62: 
            { return token(IMPORT);
            }
          case 142: break;
          case 63: 
            { return token(THROWS);
            }
          case 143: break;
          case 64: 
            { return token(NATIVE);
            }
          case 144: break;
          case 65: 
            { return token(STATIC);
            }
          case 145: break;
          case 66: 
            { return token(DOUBLE);
            }
          case 146: break;
          case 67: 
            { return token(PACKAGE);
            }
          case 147: break;
          case 68: 
            { return token(PRIVATE);
            }
          case 148: break;
          case 69: 
            { return token(EXTENDS);
            }
          case 149: break;
          case 70: 
            { return token(DEFAULT);
            }
          case 150: break;
          case 71: 
            { return token(BOOLEAN);
            }
          case 151: break;
          case 72: 
            { return token(ABSTRACT);
            }
          case 152: break;
          case 73: 
            { return token(STRICTFP);
            }
          case 153: break;
          case 74: 
            { return token(VOLATILE);
            }
          case 154: break;
          case 75: 
            { return token(PROTECTED);
            }
          case 155: break;
          case 76: 
            { return token(INTERFACE);
            }
          case 156: break;
          case 77: 
            { return token(TRANSIENT);
            }
          case 157: break;
          case 78: 
            { return token(IMPLEMENTS);
            }
          case 158: break;
          case 79: 
            { return token(NUMBER, new Integer(Integer.MIN_VALUE));
            }
          case 159: break;
          case 80: 
            { return token(SYNCHRONIZED);
            }
          case 160: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
